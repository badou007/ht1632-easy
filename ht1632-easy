#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#include "3panneaux.h"
#include "base_functions.h"
#include "message.h"
//les fonts : on trouve les nombres colonne par colonne .
// après avor dssiné le A sur un tableau 8x8(prendre les intersections
//marquer les points à allumer , créer le nombre en binaire : lsb en haut et msb est en bas
// en affectant 1 pour chaque point allumé et 0 sinon ,
// convertir en ascii si on veut .
//Pour moi :
//00x00 est nombre de la première colonne à gauche ;
//0xfe est le nombre de la 2eme colonne à gauche ;etc...
//On peut changer les dessins (lol)


//unsigned char J1[64];
//Par paresse j'ai pris le crochet gauche pour représenter l'espace (vide) car il vient
//juste après le Z
//dans la table des asccii donc ascii([)-64=26  et ascii(Z)-65=25 .
//ça facilite le balayage du tableau tab .




void init(void)
{
tonton=0;
ht1632_data_dir|=(1<<cs)|(1<<data)|(1<<wr)|(1<<cs1)|(1<<cs2);
ht1632_port=0xff;
ht1632_init();

}

void clear(void)//on ecrit des 0 partout pour effacer
{

for(unsigned int j=0;j<32;j++){

ht1632_write(0b0000);_delay_ms(100);

}
//cs_hight();
//_delay_ms(50);
}



void permute(void)// L'ESSENTIEL est là ;pour défiler !!!
{
unsigned char qq=0;
while(qq<96) {J1[qq]=J1[qq+1];qq++;}
//J1[63]=J1[0];
}
void tourner(unsigned char *x,unsigned char *y,unsigned char *z,unsigned char *u,unsigned char *s)
{
toto=0;
while(toto<8)//pour ne pas modofier les *x...*s on travaille sur les I .
{
I1[toto]=x[toto];I2[toto]=y[toto];I3[toto]=z[toto];I4[toto]=u[toto];I5[toto]=s[toto];toto++;
}
J1[0]=I1[0];permute();//permute déécale J1 vers la gauche pour libérer J1[95] à
//recevoir la donnée suivante.

// on fait tourner  (on permute vers la gauche)
//les  colonnes des 4 caracteres I1,I2,I3,I4 et on entame I5 le caractère suivant
//pour faire défiler
I1[0]=I1[1];I1[1]=I1[2];I1[2]=I1[3];I1[3]=I1[4];
I1[4]=I1[5];I1[5]=I1[6];I1[6]=I1[7];I1[7]=I2[0];
//*********
I2[0]=I2[1];I2[1]=I2[2];I2[2]=I2[3];I2[3]=I2[4];
I2[4]=I2[5];I2[5]=I2[6];I2[6]=I2[7];I2[7]=I3[0];
//**********
I3[0]=I3[1];I3[1]=I3[2];I3[2]=I3[3];I3[3]=I3[4];
I3[4]=I3[5];I3[5]=I3[6];I3[6]=I3[7];I3[7]=I4[0];
//***************
I4[0]=I4[1];I4[1]=I4[2];I4[2]=I4[3];I4[3]=I4[4];
I4[4]=I4[5];I4[5]=I4[6];I4[6]=I4[7];I4[7]=I5[0];
//********************
I5[0]=I5[1];I5[1]=I5[2];I5[2]=I5[3];I5[3]=I5[4];
I5[4]=I5[5];I5[5]=I5[6];I5[6]=I5[7];
}

void afficher2(unsigned char x[])//afficher sur l'sclave d'abord puis sur le maitre
// sinon il y a enchevetrement

{//permute();//Si on active les permutes dans les 2 affiches , les lettres deviennent immenses
// avec défilement plus rapide ; reduire j3 dans main() pour ralentir .
unsigned int tata=0;
 cs2_low();cs_hight();cs1_hight();
 ht1632_adr(0);
while(tata<32)// jusqu'à 32 pour couper J1 en trois parties égales ;
{
ht1632_write(x[tata]);
_delay_us(100);
tata++;
}
 cs2_hight();
}

void afficher1(unsigned char x[])//afficher sur l'sclave d'abord puis sur le maitre
// sinon il y a enchevetrement

{//permute();

unsigned int tata=32;
 cs1_low();cs_hight();cs2_hight();
 ht1632_adr(0);
while(tata<64)// jusqu'à 64 pour couper J1 en trois parties égales ;
{
ht1632_write(x[tata]);
_delay_us(100);
tata++;
}
 cs1_hight();
}


void afficher(unsigned char x[])// afficher sur le digit maitre

{//permute();
unsigned int tata=64;// de 32 à 64 l'autre moitié
 cs_low();cs1_hight();cs2_hight();
 ht1632_adr(0);
while(tata<96)
{
ht1632_write(x[tata]);
_delay_us(100);
tata++;
}
 cs_hight();
}



unsigned int longueur(unsigned char *x)
//Pour déterminer la fin de la lecture du tableau message: longueur de message  .
{
unsigned int count=0;
while(*x){count++;x++;}
return count;
}

void pause(unsigned int s)
{while(s--) _delay_ms(1);}
//*************************************Main


int main(void)
{
unsigned int i=0,j3=20;
unsigned int w=longueur(message);
init();

while(1){// on tourne 8 fois pour récupérer un tableau 8x8

	tourner(tab[message[i%w]-65],tab[message[(i+1)%w]-65],tab[message[(i+2)%w]-65],tab[message[(i+3)%w]-65],tab[message[(i+4)%w]-65]);
	//cette première permutation donne I1,...I4 que l'on affiche
	//puis on continue avec les I;
	// %w permet de rester entre 0 et w-1 sans s'occuper de i++
	//On fait -65 pour partir de 0 avec le A de numero 65 dans la table des ascii .. .
afficher(J1);afficher1(J1);afficher2(J1);pause(j3);	//123
	tourner(I1,I2,I3,I4,I5);//2
	//j=j2;

afficher(J1);afficher1(J1);afficher2(J1);pause(j3);	//123
	tourner(I1,I2,I3,I4,I5);//2
	//j=j2;

afficher(J1);afficher1(J1);afficher2(J1);pause(j3);	//123
	tourner(I1,I2,I3,I4,I5);//2

afficher(J1);afficher1(J1);afficher2(J1);pause(j3);	//123
	tourner(I1,I2,I3,I4,I5);//2

afficher(J1);afficher1(J1);afficher2(J1);pause(j3);	//123
	tourner(I1,I2,I3,I4,I5);//2

afficher(J1);afficher1(J1);afficher2(J1);pause(j3);	//123
	tourner(I1,I2,I3,I4,I5);//2

afficher(J1);afficher1(J1);afficher2(J1);pause(j3);	//123
	tourner(I1,I2,I3,I4,I5);//2

afficher(J1);afficher1(J1);afficher2(J1);pause(j3);	//123	//123

i++;
     }

return 1;
}
